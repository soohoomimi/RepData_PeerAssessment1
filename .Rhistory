df<-data.frame(student=c(rep(1,5),rep(2,5)), month=c(1:5,1:5),
quiz1p1=seq(20,20.9,0.1),quiz1p2=seq(30,30.9,0.1),
quiz2p1=seq(80,80.9,0.1),quiz2p2=seq(90,90.9,0.1))
df
melt.data.frame(df, c("student", "month"))
melt(df, c("student", "month"))
library(reshape2)
melt(df, c("student", "month"))
library(datasets)
datasets(tips)
head(tips)
tips<-melt(tips)
tips
cast<-dcast(tips, sex ~ smoker, mean, subset = .(variable == "total_bill"))
wide<-dcast(tips, sex ~ smoker, mean, subset = .(variable == "total_bill"))
library(plyr)
wide<-dcast(tips, sex ~ smoker, mean, subset = .(variable == "total_bill"))
View(wide)
f<-factor(letters[1:5])
f
combine_factor(f,c(1,2,3,3,3))
library(reshape2)
combine_factor(f,c(1,2,3,3,3))
?cast
set.seed(1)
d<-data.frame(year=rep(2000:2002, each=3),
count=round(runif(9,0,20)))
d
ddply(d,"year",summarise,mean.count=mean(count))
library(plyr)
ddply(d,"year",summarise,mean.count=mean(count))
ddply(d,"year", transform,total.count=sum(count))
ddply(d,"year", mutate,mu=mean(count),sigma=sd(count),cv=sigma/mu)
library(datasets)
baseball.dat<=subset(baseball,year>2000)
baseball.dat<-subset(baseball,year>2000)
baseball.dat
View(baseball.dat)
x<-ddply(baseball.dat,c("year","team"),summarize,homeruns=sum(hr))
View(x)
?transform
setwd("~/Coursera/Reproducible Research/RepData_PeerAssessment1")
act<-read.csv("activity.csv")
View(act)
?read.csv
?na.omit
act.na<-na.omit(act)
View(act.na)
library(gglot2)
install.packages("ggplot2")
library(reshape2)
?dcast
totalsteps<-dcast(act.na, date ~ steps, fun.aggregate = sum)
View(totalsteps)
totalsteps<-dcast(act.na, date + interval ~ steps, fun.aggregate = sum)
totalsteps<-dcast(act.na, date ~ steps, fun.aggregate = sum, value.var= steps)
totalsteps<-dcast(act.na, date ~ variable, fun.aggregate = sum)
totalsteps<-dcast(act.na, ~ date, fun.aggregate = sum, value.var = steps)
totalsteps<-dcast(act.na, . ~ date, fun.aggregate = sum, value.var = steps)
names(act.na)
totalsteps<-tapply(act.na$steps, act.na$date, sum)
totalsteps
totalsteps<-melt(totalsteps, id.vars="date")
View(totalsteps)
names(totalsteps)<-c("date","total.steps")
View(totalsteps)
View(totalsteps)
library(ggplot2)
qplot(total.steps, data=act.na)
qplot(total.steps, data=total.steps)
View(totalsteps)
qplot(total.steps, data=totalsteps)
qplot(total.steps, data=totalsteps, binwidth=2)
qplot(total.steps, data=totalsteps, binwidth=range/30)
qplot(total.steps, data=totalsteps)
mean(totalsteps$total.steps)
?mean
mean(totalsteps$total.steps, na.rm=TRUE)
median(totalsteps$total.steps,na.rm=TRUE)
?dcast
avginterval<-dcast(act.na, . ~ interval)
View(avginterval)
avginterval<-dcast(act.na, . ~ interval, fun.aggregate= mean)
View(avginterval)
avginterval<-dcast(act.na, steps ~ interval, fun.aggregate= mean)
View(avginterval)
avginterval<-dcast(act.na,  ~ date + interval, fun.aggregate= mean, value.vars=steps)
avginterval<-dcast(act.na, interval ~ date, fun.aggregate= mean, value.vars=steps)
View(avginterval)
avginterval<-dcast(act.na, interval ~ steps, fun.aggregate= mean, value.vars=steps)
View(avginterval)
avginterval<-dcast(act.na, date + interval ~ steps, fun.aggregate= mean, value.vars=steps)
library(plyr)
avginterval<-ddply(act.na, "interval", summarise, avg.steps=mean(steps))
View(avginterval)
View(avginterval)
max(avginterval$avg.steps)
qplot(avg.steps, data=avginterval)
qplot(avg.steps, interval, data=avginterval)
qplot(interval, avg.steps, data=avginterval)
qplot(interval, avg.steps, data=avginterval, type="l")
qplot(interval, avg.steps, data=avginterval, geom="line")
max(avginterval$avg.steps)
View(avginterval)
order(avginterval)
?which
max<-max(avginterval$avg.steps)
avginterval[max]
avginterval[,max]
avginterval[max,]
avginterval[max,]
max(avginterval$avg.steps)
avginterval[avginterval$avg.steps==max]
avginterval[avginterval$avg.steps==max,]
?count
?nrow
nrow(act$steps==NA)
nrow(act$steps=="NA")
steps<-act$steps
steps[steps=="NA"]
nrow(steps[steps=="NA"])
count(steps[steps=="NA"])
count(act[steps=="NA"])
nrow(act[act$steps=="NA"])
summary(act$steps)
summary(act$steps)$NA
count(steps[steps=="NA"])
nrow(act[act$steps=="NA"])
nrow(act[act$steps=="NA",])
str(act)
act[is.na(act)]<-0
View(act)
act<-read.csv("activity.csv")
View(act)
zero<- act
View(avginterval)
zero<-zero[is.na(zero$steps)]<-0
zero[is.na(zero$steps)]<-0
zero[is.na(zero)]<-0
View(zero)
zsteps<-tapply(zero$steps, zero$date, sum)
zsteps<-melt(zsteps, id.vars="date")
View(zsteps)
names(zsteps)<-c("date","total.steps")
qplot(total.steps, data=zsteps)
qplot(total.steps, data=totalsteps)
mean(zsteps$total.steps)
median(zsteps$total.steps)
mean(totalsteps$total.steps, na.rm=TRUE)
median(totalsteps$total.steps,na.rm=TRUE)
act2 <- ddply(act, ~ interval, transform, steps = impute.mean(steps))
library(plyr)
impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
act2 <- ddply(act, ~ interval, transform, steps = impute.mean(steps))
View(act2)
act2<-act2[order(act2$id), ]
act2<-act2[order(act2$interval), ]
View(act2)
act2<-act2[order(act2$date), ]
View(act2)
impute.avg<- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
act2 <- ddply(act, ~ interval, transform, steps = impute.avg(steps))
act2<-act2[order(act2$date), ]
totalsteps2<-tapply(act2.na$steps, act.na2$date, sum)
totalsteps2<-melt(totalsteps2, id.vars="date")
names(totalsteps2)<-c("date","total.steps")
totalsteps2<-tapply(act2$steps, act2$date, sum)
totalsteps2<-melt(totalsteps2, id.vars="date")
names(totalsteps2)<-c("date","total.steps")
qplot(total.steps, data=totalsteps2)
mean(totalsteps2$total.steps)
median(totalsteps2$total.steps)
mean(totalsteps$total.steps, na.rm=TRUE)
median(totalsteps$total.steps,na.rm=TRUE)
### Navigate to working directory containing forked repo files
setwd("~/Coursera/Reproducible Research/RepData_PeerAssessment1")
act<-read.csv("activity.csv")
act.na<-na.omit(act)
library(reshape2)
totalsteps<-tapply(act.na$steps, act.na$date, sum)
totalsteps<-melt(totalsteps, id.vars="date")
names(totalsteps)<-c("date","total.steps")
library(ggplot2)
qplot(total.steps, data=totalsteps)
mean(totalsteps$total.steps, na.rm=TRUE)
median(totalsteps$total.steps,na.rm=TRUE)
avginterval<-ddply(act.na, "interval", summarise, avg.steps=mean(steps))
qplot(interval, avg.steps, data=avginterval, geom="line")
# 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
max<-max(avginterval$avg.steps)
avginterval[avginterval$avg.steps==max,]
avginterval<-ddply(act.na, "interval", summarise, avg.steps=mean(steps))
library(plyr)
avginterval<-ddply(act.na, "interval", summarise, avg.steps=mean(steps))
qplot(interval, avg.steps, data=avginterval, geom="line")
max<-max(avginterval$avg.steps)
avginterval[avginterval$avg.steps==max,]
nrow(act[act$steps=="NA",])
library(plyr)
impute.avg<- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
act2 <- ddply(act, ~ interval, transform, steps = impute.avg(steps))
act2<-act2[order(act2$date), ]
totalsteps2<-tapply(act2$steps, act2$date, sum)
totalsteps2<-melt(totalsteps2, id.vars="date")
names(totalsteps2)<-c("date","total.steps")
qplot(total.steps, data=totalsteps2)
mean(totalsteps2$total.steps)
median(totalsteps2$total.steps)
?weekdays()
names(act2)
weekdays(act2$date)
View(act2)
?as.Date
class(act2$date)
act2$date<-as.character(act2$date)
str(act2)
act2$date<-as.Date(act2$date)
str(act2)
View(act)
View(act2)
weekdays(act2$date)
act3<-ddply(act2, ~ date, transform, weekday = weekdays(date))
View(act3)
weekday<-c("Monday","Tuesday","Wednesday","Thursday","Friday")
if(act3$weekday %in% weekday){
act3["daytpe"]<-"weekday"
} else {
act3["daytype"]<-"weekend"
}
View(act3)
tail(act3)
act3[10000:10050,]
summary(act3$weekday)
summary(act3$daytype)
eekend<-c("Saturday","Sunday")
if(act3$weekday %in% weekday){
act3["daytpe"]<-"weekday"
} else if (act3$weekday %in% weekend {
act3["daytype"]<-"weekend"
}
if(act3$weekday %in% weekday){
act3["daytpe"]<-"weekday"
} else if (act3$weekday %in% weekend) {
act3["daytype"]<-"weekend"
}
View(act3)
str(act3)
if(act3$weekday %in% weekday ==TRUE){
act3["daytpe"]<-"weekday"
} else if (act3$weekday %in% weekend==FALSE) {
act3["daytype"]<-"weekend"
}
View(act3)
act3[10000:10050,]
act3<-ddply(act2, ~ date, transform, weekday = weekdays(date)) # identify day of week
View(act3)
weekday<-c("Monday","Tuesday","Wednesday","Thursday","Friday")
weekend<-c("Saturday","Sunday")
weekday<-c("Monday","Tuesday","Wednesday","Thursday","Friday")
weekend<-c("Saturday","Sunday")
act3$weekday %in% weekday
if(act3$weekday %in% weekday ==TRUE){
act3["daytpe"]<-"weekday"
} else {
act3["daytype"]<-"weekend"
}
View(act3)
act3[10000:10050,]
for i in 1:17568{
if(act3$weekday %in% weekday ==TRUE){
act3["daytpe"]<-"weekday"
} else {
act3["daytype"]<-"weekend"
}
}
View(act3)
act3[10000:10050,]
for i in 1:17568{
if(act3$weekday[i] %in% weekday ==TRUE){
act3$daytype[i]<-"weekday"
} else {
act3$daytype[i]<-"weekend"
}
}
?ifelse
ifelse(act3$weekday[i] %in% weekday==TRUE, "weekday","weekend")
ifelse(act3$weekday %in% weekday==TRUE, "weekday","weekend")
act3<-ddply(act2, ~ date, transform, weekday = weekdays(date)) # identify day of week
rm(weekend)
rm(eekend)
act3["daytype"]<-ifelse(act3$weekday %in% weekday==TRUE, "weekday","weekend")
View(act3)
act3[10000:10050,]
str(act3)
act3$daytype<-as.factor(act3$daytype)
str(act3)
library(lattice)
xyplot(act3$interval ~ act3$steps | act3$daytype, layout=c(1,2))
xyplot(act3$steps ~ act3$interval | act3$daytype, layout=c(1,2))
?xyplot
xyplot(steps ~ interval | daytype, data=act3,layout=c(1,2), type="l")
View(act3)
library(reshape2)
View(avginterval)
avgdaytype<-ddply(act3, "daytype", summarise, avg.steps=mean(steps))
View(avgdaytype)
avgdaytype<-ddply(act3, "interval", summarise, avg.steps=mean(steps))
View(avgdaytype)
?ddply
avgdaytype<-ddply(act3, .(interval,daytype), summarise, avg.steps=mean(steps))
View(avgdaytype)
xyplot(steps ~ interval | daytype, data=act3,layout=c(1,2), type="l")
xyplot(avg.steps ~ interval | daytype, data=avgdaytype,layout=c(1,2), type="l")
avgdaytype<-ddply(act3, .(interval,daytype), summarise, "Number of steps"=mean(steps))
View(avgdaytype)
xyplot("Number of steps" ~ interval | daytype, data=avgdaytype,layout=c(1,2), type="l")
xyplot(Number of steps ~ interval | daytype, data=avgdaytype,layout=c(1,2), type="l")
avgdaytype<-ddply(act3, .(interval,daytype), summarise, avg.steps=mean(steps))
xyplot(avg.steps ~ interval | daytype, data=avgdaytype,layout=c(1,2), type="l")
xyplot(avg.steps ~ interval | daytype, data=avgdaytype,layout=c(1,2), type="l", xlab="Interval", ylab="Number of steps")
